* sia
** Database setup
We're using supabase postgres and sort of reliant on its auth database setup. So if we're testing we'd want to replicate some of it.
*** Test DB Setup
#+begin_src sql
CREATE DATABASE sia_test_db WITH OWNER postgres;

\c sia_test_db

CREATE SCHEMA auth AUTHORIZATION postgres;

-- NOTE: This is a very trimmed down version
-- N
CREATE TABLE auth.users (
    instance_id uuid,
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email TEXT
);

-- Now we've minimally replicated supabase postgres in our local system, so we're good for running tests. At this point we can run our application migration scripts as per our need.
#+end_src
** API Endpoints
The following API endpoints have been implemented in ~backend/src/sia/routers/activity.py~:

- ~GET /activities~ : Lists all activities for the user (no pagination implemented).
  - Requires ~user_id~ as a parameter.
  - Returns a list of Activity objects.

- ~GET /activities/{activity_id}/details~ : Gets info about an individual activity.
  - Retrieves the activity along with related activity items and answers using a join.
  - Currently returns only the activity object. The items/answers can be fetched separately or the schema could be extended.
  - Returns 404 if activity not found.

- ~GET /activities/{activity_id}/items/{activity_item_id}~ : Gets a specific activity item.
  - Requires both ~activity_id~ and ~activity_item_id~.
  - Returns 404 if activity item not found.

- ~POST /activities/create~ : Creates a new activity.
  - Calls a remote endpoint (currently a dummy implementation) to generate activity parameters.
  - Creates the activity and its items in a transaction.
  - Returns the created activity.
  - Requires ~user_id~ as a parameter.

- ~POST /activities/{activity_id}/start~ : Starts an activity by setting its status to ONGOING.
  - Implemented in a transaction.
  - Performs several checks:
    - Verifies the activity exists (404 if not found).
    - Checks user authorization (403 if unauthorized).
    - Checks if activity is already completed (400 if completed).
  - Updates activity status to ONGOING.
  - Returns the first non-terminated activity item.
  - Returns 404 if no valid activity items are found.

- ~POST /activities/{activity_id}/items/{activity_item_id}/answer~ : Submits an answer for an activity item.
  - Implemented in a transaction.
  - Delegates to ~handle_submit_activity_item_answer~ function which:
    - Processes the answer based on activity type.
    - Updates activity item status.
    - Checks for activity completion.
    - Returns an ~AnswerResponse~ with:
      - ~next_item_id~: ID of the next item or null if none.
      - ~hints~: List of hints if applicable.
      - ~success_verdict~: Boolean indicating if the answer was correct.
      - ~activity_complete~: Boolean indicating if the activity is now complete.

The implementation uses dependency injection for database access and follows a transaction-based approach for operations that modify multiple records.
